schema {
  query: RootQuery
  mutation: RootMutation
}

# Indicates that an Input Object is a OneOf Input Object (and thus requires
#                         exactly one of its field be provided)
directive @oneOf on INPUT_OBJECT

type BoardQuestion {
  boardId: Int!
  questionId: Int!
  category: String!
  dailyDouble: Boolean!
  points: Int!
  gridRow: Int!
  gridCol: Int!
}

input CreateBoardQuestionInput {
  boardId: Int!
  questionId: Int!
  category: String!
  dailyDouble: Boolean!
  points: Int!
  gridRow: Int!
  gridCol: Int!
}

input CreateGameBoardInput {
  userId: Int!
  title: String!
}

input CreateQuestionInput {
  userId: Int!
  question: String!
  answer: String!
}

input CreateUserInput {
  username: String!
}

# Implement the DateTime<Utc> scalar
#
# The input/output is a string in RFC3339 format.
scalar DateTime

type DetailedBoardQuestion {
  boardQuestion: BoardQuestion!
  question: Question!
}

# Diesel Game Board model with async-graphql support
type GameBoard {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: Int!
  title: String!
}

type GameBoardData {
  categories: [String!]!
  questions: [DetailedBoardQuestion!]!
}

# Disel Question Model with async-graphql suppport
type Question {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: Int!
  question: String!
  answer: String!
}

type RootMutation {
  createUser(input: CreateUserInput!): User!

  # Create a new gameboard with example question
  createGameBoard(input: CreateGameBoardInput!): GameBoard!

  # Update gameboard title
  updateTitle(id: Int!, newTitle: String!): GameBoard!

  # Create a new quesiton
  createQuestion(input: CreateQuestionInput!): Question!

  # Update a question
  updateQuestion(input: UpdateQuestionInput!): Question!

  # Delete a question by ID
  deleteQuestion(questionId: Int!): Boolean!

  # Associate a question with a gameboard
  createBoardQuestion(input: CreateBoardQuestionInput!): BoardQuestion!
  updateBoardQuestion(input: UpdateBoardQuestionInput!): BoardQuestion!

  # Update category for a specific column in a game board
  updateBoardColumnCategory(
    gameBoardId: Int!
    gridCol: Int!
    newCategory: String!
  ): Boolean!
}

type RootQuery {
  # Fetch user by id
  getUser(userId: Int!): User!

  # Fetch all users
  allUsers: [User!]!

  # Fetch a single gameboard by id
  getGameBoard(gameBoardId: Int!): GameBoard!

  # Fetch all gameboards associated with a specific user
  getGameBoardsFromUser(userId: Int!): [GameBoard!]!

  # Fetch all gameboards in the system
  allGameBoards: [GameBoard!]!

  # Fetch a single question by id
  question(questionId: Int!): Question!

  # Fetch all questions from a user
  getQuestionFromUser(userId: Int!): [Question!]!

  # Fetch all questions
  allQuestions: [Question!]!

  # Fetch questions from list of ids
  getQuestionsFromIds(questionIds: [Int!]!): [Question!]!

  # Fetch a BoardQuestion by board id and question id
  boardQuestion(gameBoardId: Int!, questionId: Int!): BoardQuestion!

  # Fetch all BoardQuestions for a specific GameBoard
  boardQuestionsByBoard(gameBoardId: Int!): [BoardQuestion!]!

  # Fetch DetailedBoardQuestion from game_board_id and question_id
  detailedBoardQuestion(
    gameBoardId: Int!
    questionId: Int!
  ): DetailedBoardQuestion!

  # Fetch game board data
  fetchGameBoardData(gameBoardId: Int!): GameBoardData!
}

input UpdateBoardQuestionInput {
  boardId: Int!
  questionId: Int!
  category: String
  dailyDouble: Boolean
  points: Int
  gridRow: Int
  gridCol: Int
}

input UpdateQuestionInput {
  id: Int!
  question: String
  answer: String
}

type User {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
}
